Ansible:
---------
   Remote login needs passwod or key based on server authentication.

1) remote login to particular server --> ssh centos@172.58.42.61 -C "echo Hi, from RHEL 9 > /tmp/hi.txt"
   it will create login ,creates a file hi.txt.

2) Installation on remote server --> ssh centos@172.58.42.61 -C "curl https://raw.githubusercontent.com/daws-78s/expense-shell/main/mysql.sh | sudo bash"
   it will create login and execute that particular script.

3) Adhoc commands used urgency purpose as well as little installations

--> ansible -i 172.58.42.61, all -e ansible_user=ec2-user -e ansible_password=DevOps321 -m ping
     TO know whether server is reachable or not as well as to check credentials.
	
--> ansible -i 172.58.42.61, all -e ansible_user=ec2-user -e ansible_password=DevOps321 -m dnf -a "name=nginx state=installed"
	 To install nginx on node server but needs root acces so,

--> -b become root(it gives root access to adhoc commands)

--> ansible -i 172.58.42.61, all -e ansible_user=ec2-user -e ansible_password=DevOps321 -m dnf -a "name=nginx state=installed" -b
	 To install nginx on node server

--> ansible -i 172.58.42.61, all -e ansible_user=ec2-user -e ansible_password=DevOps321 -m service -a "name=nginx state=started" -b
     To start nginx server
	 
Adhoc commands = manual way (shell commands)
ansible-playbook = keep all your modules in a single file with yaml syntax. Run that file(shell script)

YAML --> yet another markup language

starts with ---

DTO --> data transfer objects


XML --> Extensive markup language
---------------------------------
<user>
	<username>chandrareddy</username>
	<password>admin123</password>
</user>


JSON --> java script object notation
------------------------------------
[] --> denotes list

{	"Username": "ChandraReddy",
	"Password": "admin123",
	"Contact Details": [
	{	"House No": 100
		"Street": "Highway steet"
		"province": "Ontario"
		"Country": "Canada"
}

4) Ansible needs inventory file to save host's ip's. we can save multiple server.

5) ansible-playbook -i inventory.ini -e ansible_user=ec2-user -e ansible_password=DevOps321 01-ping.yaml
   TO execute a yaml playbook on single host by using user name and password

6) ansible-playbook -vvv -i inventory.ini -e ansible_user=ec2-user -e ansible_password=DevOps321 01-ping.yaml
   Add -vvv to debug the ansible while executing.
 
7) ansible backend -i inventory.ini -e "ansible_user=ec2-user" -e "ansible_ssh_pass=DevOps321" -b -a "sudo systemctl restart backend"