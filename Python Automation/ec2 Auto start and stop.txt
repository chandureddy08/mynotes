If you prefer a cloud-based solution with no ongoing server requirements, You need a python script, Lambda and CloudWatch.

1) Create a lambda function(using terraform):
---------------------------------------------

data "archive_file" "ec2_auto_start_zip" {
  type        = "zip"
  source_file = "${path.module}/scripts/ec2_auto_start.py"
  output_path = "${path.module}/ec2_auto_start.zip"
}

data "archive_file" "ec2_auto_stop_zip" {
  type        = "zip"
  source_file = "${path.module}/scripts/ec2_auto_stop.py"
  output_path = "${path.module}/ec2_auto_stop.zip"
}

resource "aws_lambda_function" "ec2_auto_start" {
  function_name = "EC2AutoStart"
  handler       = "ec2_auto_start.lambda_handler"
  role          = aws_iam_role.lambda_role.arn
  runtime       = "python3.12"

  filename         = data.archive_file.ec2_auto_start_zip.output_path
  source_code_hash = data.archive_file.ec2_auto_start_zip.output_base64sha256
  timeout = 60

  depends_on = [aws_iam_policy.lambda_policy]
}

resource "aws_lambda_function" "ec2_auto_stop" {
  function_name = "EC2AutoStop"
  handler       = "ec2_auto_stop.lambda_handler"
  role          = aws_iam_role.lambda_role.arn
  runtime       = "python3.12"

  filename         = data.archive_file.ec2_auto_stop_zip.output_path
  source_code_hash = data.archive_file.ec2_auto_stop_zip.output_base64sha256
  timeout = 60

  depends_on = [aws_iam_policy.lambda_policy]
}


2)python script to start ec_2 instances:
----------------------------------------

import boto3
from botocore.exceptions import ClientError

def start_instances_by_tag(tags, region):
    ec2 = boto3.client("ec2", region_name = region)
    tag_filters = [
        {
            "Name": f"tag:{key}",
            "Values": [value]
        } for key, value in tags.items()
    ]
    tag_filters.append({"Name": "instance-state-name", "Values":["stopped"]})  #Includes only stopped instances

    try:
        paginator = ec2.get_paginator("describe_instances")
        page_iterator = paginator.paginate(Filters=tag_filters)

        instance = []
        for page in page_iterator:
            for reservation in page["Reservations"]:
                for instances in reservation["Instances"]:
                    instances.append(instance["InstanceId"])

        if instances:
            start_responce = ec2.start_instances(InstanceIds=instances)
            print(f"Started instances: {instances}")
            return start_responce
        else:
            print("No stopped instances found with the specific tags.")
    except ClientError as e:
        print(f"An error occured:{e}")

def lambda_handler(event,context):

    tags = {
        "Auto-instance-sheduler": "yes",
        "Environment": "Dev"
    }
    region = "us-east-1"
    start_instances_by_tag(tags, region)
	
3) Python script to stop ec2 instances:
---------------------------------------

import boto3
from botocore.exceptions import ClientError


def stop_instances_by_tag(tags, region):
    ec2 = boto3.client('ec2', region_name=region)
    tag_filters = [{'Name': f'tag:{key}', 'Values': [value]} for key, value in tags.items()]
    tag_filters.append({'Name': 'instance-state-name', 'Values': ['running']})  # Include only running instances
    try:
        paginator = ec2.get_paginator('describe_instances')
        page_iterator = paginator.paginate(Filters=tag_filters)

        instances = []
        for page in page_iterator:
            for reservation in page['Reservations']:
                for instance in reservation['Instances']:
                    instances.append(instance['InstanceId'])

        if instances:
            stop_response = ec2.stop_instances(InstanceIds=instances)
            print(f'Stopped instances: {instances}')
            return stop_response
        else:
            print('No running instances found with the specified tags.')
    except ClientError as e:
        print(f'An error occurred: {e}')


def lambda_handler(event, context):
    # Specify the tag key, value, and region
    tags = {
        'Auto-instance-scheduler': 'yes',
        'Environment': 'dev'  # Example additional tag
    }
    region = 'us-east-1'
    stop_instances_by_tag(tags, region)