
* Install the node exporter in nodes to monitor either eks nodes or ec2 in case of eks install in a name space.

Prometheus is an open-source monitoring and alerting system that collects, stores, and queries time-series data. It‚Äôs widely used for observability in cloud-native environments like Kubernetes.

üîπ Primary Use Cases:
‚úÖ Infrastructure & Application Monitoring
‚úÖ Cloud & Kubernetes Observability
‚úÖ Performance & Reliability Tracking
‚úÖ Alerting for Downtime or Anomalies

üîπ Prometheus Architecture
Prometheus follows a pull-based architecture, meaning it fetches (scrapes) data from targets rather than waiting for them to send data.

üñº Components of Prometheus:

1Ô∏è.Prometheus Server ‚Äì The main component that collects and stores metrics.
2.Exporters ‚Äì Agents that expose metrics (e.g., Node Exporter for system metrics).
3Ô∏è.Service Discovery ‚Äì Automatically finds targets (e.g., Kubernetes, AWS).
4.Time-Series Database (TSDB) ‚Äì Stores metrics efficiently with labels.
5Ô∏è.PromQL (Query Language) ‚Äì Retrieves and analyzes stored data.
6Ô∏è.Alertmanager ‚Äì Sends alerts when predefined conditions are met.
7Ô∏è.Visualization ‚Äì Integrates with Grafana for dashboards.

üîπ How Prometheus Works

1Ô∏è.Data Collection (Scraping):

Prometheus scrapes (pulls) metrics from HTTP endpoints exposed by targets.
Example HTTP metric endpoint (exposed by an application):
lua
Copy
Edit
http_requests_total{method="GET", status="200"} 500
‚Üí This means 500 GET requests were received with a 200 OK status.

2.Service Discovery (Dynamic Target Detection):

Instead of manually defining targets, Prometheus automatically discovers services.
Works with:
‚úÖ Kubernetes (Pods, Nodes, Services)
‚úÖ AWS EC2, Azure, GCE
‚úÖ Consul, Etcd, Zookeeper
‚úÖ Docker Swarm, Nomad
Example: Kubernetes Service Discovery
yaml
Copy
Edit
scrape_configs:
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
This dynamically discovers all Kubernetes Pods exposing metrics.

3Ô∏è.Storage (Time-Series Database - TSDB):

Metrics are stored as time-series data.
Each metric has:
A Name (e.g., cpu_usage)
A Timestamp (when it was recorded)
Labels (Key-Value Pairs) (e.g., {instance="server1", region="us-east"})
Example of Stored Metrics:
arduino
Copy
Edit
cpu_usage{instance="server1", region="us-east"} 75
memory_usage{instance="server1"} 60
‚Üí This means CPU usage is 75%, and memory usage is 60% on server1.

4Ô∏è.Querying Metrics with PromQL:

PromQL (Prometheus Query Language) is used to retrieve and analyze metrics.

Basic Queries
üìå Get all CPU usage metrics:

promql
Copy
Edit
cpu_usage
üìå Get the total number of HTTP requests:

promql
Copy
Edit
http_requests_total
Advanced Queries
üìå Show the rate of HTTP requests over the last 5 minutes:

promql
Copy
Edit
rate(http_requests_total[5m])
üìå Show CPU usage per instance, sorted in descending order:

promql
Copy
Edit
cpu_usage | topk(5, cpu_usage)
üìå Show the average memory usage over the past 10 minutes:

promql
Copy
Edit
avg_over_time(memory_usage[10m])

üîπ Alerting with Alertmanager
Prometheus triggers alerts when predefined conditions are met. These alerts are sent to Alertmanager, which routes them to Slack, Email, PagerDuty, or Webhooks.

1Ô∏è.Define Alert Rules in Prometheus:

Alerts are defined in alert.rules.yml:

yaml
Copy
Edit
groups:
  - name: high_cpu_usage
    rules:
      - alert: HighCPUUsage
        expr: cpu_usage > 80
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "High CPU usage detected on {{ $labels.instance }}"
‚úî expr: cpu_usage > 80 ‚Üí Triggers if CPU usage exceeds 80%.
‚úî for: 2m ‚Üí Waits 2 minutes before triggering (avoiding false alarms).
‚úî labels ‚Üí Defines the severity of the alert.
‚úî annotations ‚Üí Provides additional info in the alert message.

2Ô∏è.Configure Alertmanager:

Alertmanager decides where to send alerts (Slack, email, etc.).
Example alertmanager.yml configuration:

yaml
Copy
Edit
route:
  receiver: 'slack'
receivers:
  - name: 'slack'
    slack_configs:
      - channel: '#alerts'
        send_resolved: true
        api_url: 'https://hooks.slack.com/services/TOKEN'
‚úî Sends alerts to Slack channel #alerts.
‚úî Uses a webhook API URL to send notifications.

üîπ Visualization with Grafana
Grafana provides advanced dashboards for Prometheus data.
Example Grafana Dashboard Queries:
CPU Usage Trend ‚Üí avg(cpu_usage) by (instance)
Memory Usage Over Time ‚Üí avg_over_time(memory_usage[10m])
HTTP Requests Per Second ‚Üí rate(http_requests_total[1m])
Steps to Integrate Prometheus with Grafana
Install Grafana (docker run -d -p 3000:3000 grafana/grafana).
Add Prometheus as a data source.
Create a new dashboard and use PromQL queries.

üîπ Scaling Prometheus
For large-scale monitoring, Prometheus can be federated or used with remote storage.

Federation (Hierarchical Prometheus Setup)
Used to aggregate metrics from multiple Prometheus servers.
Example:
Local Prometheus instances collect metrics.
A central Prometheus server scrapes the local instances.
yaml
Copy
Edit
scrape_configs:
  - job_name: 'federate'
    honor_labels: true
    metrics_path: '/federate'
    params:
      match[]:
        - '{job="kubernetes"}'
    static_configs:
      - targets:
          - 'prometheus-1:9090'
          - 'prometheus-2:9090'
Remote Storage Solutions
Prometheus can push data to long-term storage like:

‚úÖ Thanos
‚úÖ Cortex
‚úÖ VictoriaMetrics

üîπ Summary: Why Use Prometheus?

‚úÖ Pull-based monitoring (better control over data collection).
‚úÖ Powerful query language (PromQL) for advanced analysis.
‚úÖ Service Discovery (dynamic monitoring in Kubernetes, AWS, etc.).
‚úÖ Built-in alerting with Alertmanager.
‚úÖ Scalable & highly available (Federation & Remote Storage).
‚úÖ Easy integration with Grafana for beautiful dashboards.

** prometheus.yaml **
---------------------

The prometheus.yml file is the main configuration file for Prometheus. It defines:

‚úÖ Global settings (scrape interval, evaluation interval)
‚úÖ Scrape targets (where Prometheus collects metrics from)
‚úÖ Service Discovery (dynamic detection of services)
‚úÖ Alerting (connecting to Alertmanager)
‚úÖ Rule files (defining alerts)
‚úÖ Relabeling (modifying and filtering labels before storage)

global:
  scrape_interval: 15s
  evaluation_interval: 30s

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'node_exporter'
    static_configs:
      - targets: ['node-exporter:9100']

  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: keep
        regex: my-app

  - job_name: 'ec2-instances'
    ec2_sd_configs:
      - region: us-east-1
    relabel_configs:
      - source_labels: [__meta_ec2_tag_Name]
        regex: my-server.*
        action: keep

alerting:
  alertmanagers:
    - static_configs:
        - targets: ['alertmanager:9093']

rule_files:
  - "alert.rules.yml"
  
üîπ Summary
‚úî Global settings ‚Üí scrape_interval, evaluation_interval
‚úî Scrape targets ‚Üí Static targets (static_configs) or dynamic (service discovery)
‚úî Service Discovery ‚Üí Kubernetes, AWS EC2, Consul, Docker
‚úî Alerting ‚Üí Defines where Prometheus sends alerts
‚úî Rule Files ‚Üí Loads alert rules from alert.rules.yml
‚úî Relabeling ‚Üí Filters & modifies target labels.

** Prometheus Setup for EKS cluster **
--------------------------------------

üöÄ Full Prometheus Setup on EKS

üîπ Prerequisites
1Ô∏è.EKS Cluster Ready (kubectl configured)
2Ô∏è.Helm Installed (helm version)
3Ô∏è.kubectl Installed (kubectl version)
4Ô∏è.IAM Role with EKS Permissions

1Ô∏è.Install Prometheus using Helm:

Helm makes it easy to deploy Prometheus in Kubernetes.

Step 1: Add the Helm Chart Repository
sh
Copy
Edit
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
Step 2: Install Prometheus
sh
Copy
Edit
helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace
‚úî This deploys Prometheus, Alertmanager, and Grafana in monitoring namespace.
‚úî kube-prometheus-stack is a full monitoring solution.

2Ô∏è.Expose Prometheus Services:

By default, Prometheus and Grafana run inside the cluster. To access them:

Option 1: Port Forwarding (For Testing)
sh
Copy
Edit
kubectl port-forward -n monitoring svc/prometheus-kube-prometheus-prometheus 9090
kubectl port-forward -n monitoring svc/prometheus-grafana 3000
Prometheus UI: http://localhost:9090
Grafana UI: http://localhost:3000
Option 2: Expose via LoadBalancer (For Production)
Modify values.yaml before installing Prometheus:

yaml
Copy
Edit
service:
  type: LoadBalancer
Apply the updated Helm release:

sh
Copy
Edit
helm upgrade prometheus prometheus-community/kube-prometheus-stack --namespace monitoring
‚úî This exposes Prometheus & Grafana with AWS LoadBalancer.

3Ô∏è.Configure Prometheus for EKS Monitoring:

Prometheus needs to scrape Kubernetes metrics like CPU, memory, network, and pod status.

Step 1: Check Available Services
sh
Copy
Edit
kubectl get svc -n monitoring
You should see services like:

prometheus-kube-prometheus-prometheus
prometheus-kube-state-metrics
prometheus-node-exporter
Step 2: Verify Prometheus Service Discovery
Run:

sh
Copy
Edit
kubectl exec -n monitoring -it $(kubectl get pod -n monitoring -l app.kubernetes.io/name=prometheus -o jsonpath="{.items[0].metadata.name}") -- sh
Inside the Prometheus pod, check the discovered targets:

sh
Copy
Edit
wget -qO- http://localhost:9090/api/v1/targets | jq
‚úî Ensure that EKS nodes and pods are being scraped.

4.Set Up Alertmanager:

Alertmanager handles notifications to Slack, Email, PagerDuty, etc.

Step 1: Create alertmanager.yaml ConfigMap
yaml
Copy
Edit
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: monitoring
data:
  alertmanager.yml: |
    route:
      receiver: 'slack'
    receivers:
      - name: 'slack'
        slack_configs:
          - channel: '#alerts'
            send_resolved: true
            api_url: 'https://hooks.slack.com/services/YOUR_WEBHOOK_URL'
‚úî This configures alerts to a Slack channel.

Step 2: Apply the ConfigMap
sh
Copy
Edit
kubectl apply -f alertmanager.yaml
‚úî Now, alerts will be sent to Slack when an issue occurs.

5Ô∏è.Configure Grafana Dashboards:

Step 1: Get Grafana Admin Password
sh
Copy
Edit
kubectl get secret -n monitoring prometheus-grafana -o jsonpath="{.data.admin-password}" | base64 --decode
‚úî This gives you the default Grafana admin password.

Step 2: Access Grafana
sh
Copy
Edit
kubectl port-forward -n monitoring svc/prometheus-grafana 3000
Then open http://localhost:3000 and log in with:

Username: admin
Password: (from the previous command)

Step 3: Add Prometheus as a Data Source

1.Go to Grafana UI ‚Üí Configuration ‚Üí Data Sources
2Ô∏è.Click "Add data source"
3Ô∏è.Select Prometheus and enter:

pgsql
Copy
Edit
http://prometheus-kube-prometheus-prometheus.monitoring.svc.cluster.local:9090

4Ô∏è.Click Save & Test:

‚úî Now Grafana can visualize Prometheus metrics.

6.Create Custom Prometheus Alerts:

Example: Alert for High CPU Usage
Create a file cpu_alert.yml:

yaml
Copy
Edit
groups:
  - name: high_cpu_usage
    rules:
      - alert: HighCPUUsage
        expr: avg(rate(container_cpu_usage_seconds_total[5m])) by (container) > 0.8
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "High CPU usage detected on {{ $labels.container }}"
Apply it:

sh
Copy
Edit
kubectl apply -f cpu_alert.yml
‚úî Triggers an alert when CPU usage exceeds 80% for 2 minutes.

7.Monitor EKS Nodes and Pods:

To monitor CPU, memory, and network usage, use PromQL queries in Prometheus UI or Grafana.

Check Pod CPU Usage
promql
Copy
Edit
sum(rate(container_cpu_usage_seconds_total[5m])) by (pod)
Check Memory Usage
promql
Copy
Edit
sum(container_memory_usage_bytes) by (pod)
Check Running Pods
promql
Copy
Edit
count(kube_pod_info)
‚úî These queries help track cluster health.

üöÄ Summary: What We Did:

‚úÖ Installed Prometheus on EKS using Helm
‚úÖ Configured Prometheus to scrape EKS metrics
‚úÖ Set up Alertmanager for notifications
‚úÖ Exposed Prometheus and Grafana
‚úÖ Added a custom alert for high CPU usage.